proc init_daris_conf { } {
    if { [ xvalue exists [ package.exists :package "PSSD" ] ] == "false" } {
	error "Package PSSD has not been installed.  You must install it first"
    } 

    set name "<%= fillIn(@server_name, 'unknown') %>"
    set org "<%= fillIn(@server_organization, 'Unknown organization') %>"
    server.identity.set :name $name :organization $org
    set_property "jvm.data.model" "<%= java_memory_model() %>"
    set_property "jvm.memory.max" "<%= java_memory_max(@jvm_memory_max) %>"
    set_property "jvm.memory.perm.max" \
	"<%= fillIn(@jvm_memory_perm_max, '512') %>"
    set_property "mail.smtp.host" "<%= fillIn(@mail_smtp_host, '') %>"
    set_property "mail.smtp.port" "<%= fillIn(@mail_smtp_port, '25') %>"
    set_property "mail.from" "<%= fillIn(@mail_from, 'nobody@nowhere') %>"
    set_property "notification.from" \
	"<%= fillIn(@notification_from, 'nobody@nowhere') %>"

    set domain "<%= fillIn(@authentication_domain, '') %>"
    if { $domain != "" } {
        authentication.domain.create :domain $domain :ifexists ignore
    }
    set store "<%= @dicom_store %>"
    set store_exists [ xvalue exists [ asset.store.exists :name $store ] ]
    if { $store_exists == "false" } then {
	error "Dicom store $store has not been created.  You must create it first"
    }
    set namespace "<%= fillIn(@dicom_namespace, 'dicom') %>"
    set namespace_exists [ xvalue exists [ asset.namespace.exists \
					       :namespace $namespace ] ]
    if { $namespace_exists == "false" } then {
	asset.namespace.create :namespace $namespace \
	    :store $store :description "DICOM namespace"
    }
#<%= @dicom_proxy_domain %>
#<% @dicom_proxy_user_names.each() do |name| %><%= name + "\n" %><% end %> 
#<% @dicom_ingest_notifications.each() do |addr| %><%= addr + "\n" %><% end %>

}

proc set_property { name value } {
    if { $value == "" } { 
       server.property.unset :name $name
    } else { 
       server.property.set :property -name $name $value
    }
}


init_daris_conf


